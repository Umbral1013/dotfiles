"
" vimrc
"

" Let us begin with a nice base.
source $VIMRUNTIME/defaults.vim

" Match even more expressions with the '%' motion.
if has('syntax') && has('eval')
    packadd! matchit
endif

" Show Vim in truecolor if it is possible.
if (has("termguicolors"))
    set termguicolors
endif

" For Gvim.
if (has("gui_running"))
    set guioptions-=m  " Remove menu bar.
    set guioptions-=T  " Remove toolbar.
    set guioptions-=r  " Remove right-hand scroll bar.
    set guioptions-=L  " Remove left-hand scroll bar.
    set guifont=IBM\ Plex\ Mono\ 12
endif

set title
set cursorline
set number relativenumber
set showmatch
set backupcopy=auto
set mouse=a     " Activate mouse inputs.
set path+=**	" Fuzzy finder.
set autoindent
set wildoptions=pum " Only works on Vim9+.

" Ignore case when searching for a pattern.
set smartcase
set ignorecase

" Word completion given a dictionary. Enabling spell is required.
set spelllang=es_mx,en_us
set complete+=k
set completeopt=longest,menuone

" Avoid all the hit-enter prompts caused by file messages, and some other
" messages.
" Read the Vim help file for more information.
set shortmess+=acs

" Wrap long lines and preserve their indentation.
" Via https://retracile.net/wiki/VimBreakIndent
set wrap
let &showbreak='+++ '
set breakindent
set linebreak

set background=dark
colorscheme habamax

" Groff preferences.
let nroff_is_groff=1
let nroff_space_errors=1
let b:preprocs_as_sections=1
" Highlight extra spacing while editing a groff file.
hi def nroffDefinition
            \ term=italic
            \ cterm=italic
            \ gui=reverse
hi def nroffDefSpecial
            \ term=italic,bold
            \ cterm=italic,bold
            \ gui=reverse,bold

" netrw preferences. Check out netrw-browse-maps in the Vim help file too.
let g:netrw_browsex_viewer="/usr/bin/xdg-open"
let g:netrw_banner=0
let g:netrw_browse_split=4
let g:netrw_altv=1
let g:netrw_liststyle=3
let g:netrw_winsize=30
let g:netrw_list_hide=netrw_gitignore#Hide()

" Linter and fixer options.
let g:ale_fix_on_save=1
let g:ale_linters={
            \ 'python': ['flake8'],
            \ 'lua': ['luac'],
            \ 'html': ['vscodehtml'],
            \ 'css': ['vscodecss']
            \ }
let g:ale_fixers={
            \ 'python': ['yapf'],
            \ 'lua': ['lua-format'],
            \ 'html': ['prettier'],
            \ 'css': ['prettier']
            \ }

" Break lines at 78 characters. Only for generic text documents.
augroup vimrcEx
    au!
    autocmd FileType text setlocal textwidth=78
augroup END

let mapleader=","

" Edit my Vim settings in a new tab.
nnoremap <leader>v <Esc>:e $MYVIMRC<CR>

" Move between buffers with ease.
nnoremap <leader>n <Esc>:bnext<CR>
nnoremap <leader>p <Esc>:bprevious<CR>

" Show a line at the 80 character mark.
nnoremap <leader>cc :set colorcolumn=80<CR>
nnoremap <leader>ncc :set colorcolumn-=80<CR>

" Render PDF document from a MOM file.
nnoremap <leader>mom <Esc>:!pdfmom -k -R % > output.pdf<CR>

" Snippets.
nnoremap <leader>date
            \ <Esc>:put =strftime('%c')
            \ <CR>kJ
nnoremap <leader>html
            \ <Esc>:-1read $HOME/dotfiles/snippets/skeleton.html
            \ <CR>4jcit
nnoremap <leader>meta
            \ <Esc>:-1read $HOME/dotfiles/snippets/metadata.txt
            \ <CR>A

" Toggle spellcheck on and off using <F5>.
" Via https://vim.fandom.com/wiki/Toggle_spellcheck_with_function_keys
nnoremap <silent> <F5>
            \ <Esc>:setlocal spell!
            \ spelllang=es_mx,en_us<CR>

" Automatically insert header gates for C/C++.
" Via
" https://vim.fandom.com/wiki/Automatic_insertion_of_C/C%2B%2B_header_gates
function! s:insert_gates()
  let gatename = substitute(toupper(expand("%:t")), "\\.", "_", "g")
  execute "normal! i#ifndef " . gatename
  execute "normal! o#define " . gatename . " "
  execute "normal! Go#endif /* " . gatename . " */"
  normal! kk
endfunction
autocmd BufNewFile *.{h,hpp} call <SID>insert_gates()
