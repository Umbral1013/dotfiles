"
" ~/.vimrc
"

" Let us begin with a nice base.
unlet! skip_defaults_vim
source $VIMRUNTIME/defaults.vim

" Match even more expressions with the '%' motion.
if has('syntax') && has('eval')
    packadd! matchit
endif

" Break lines at 78 characters. Only for generic text documents.
augroup vimrcEx
    au!
    autocmd FileType text setlocal textwidth=78
augroup END

let mapleader=","

" Edit my Vim settings in a new tab.
nnoremap <leader>s <Esc>:tabe $MYVIMRC<CR>

" Move between buffers with ease.
nnoremap <leader>n <Esc>:bnext<CR>
nnoremap <leader>p <Esc>:bprevious<CR>

" Toggle spellcheck on and off using <F5>.
" Via https://vim.fandom.com/wiki/Toggle_spellcheck_with_function_keys
nnoremap <silent> <F5>
            \ <Esc>:setlocal spell!
            \ spelllang=es_mx,en_us<CR>

" Snippets.
nnoremap <leader>date
            \ <Esc>:put =strftime('%c')
            \ <CR>kJ
nnoremap <leader>html
            \ <Esc>:-1read $HOME/dotfiles/snippets/skeleton.html
            \ <CR>4jcit
nnoremap <leader>meta
            \ <Esc>:-1read $HOME/dotfiles/snippets/metadata.txt
            \ <CR>A

" Groff preferences.
let nroff_is_groff=1
let nroff_space_errors=1
let b:preprocs_as_sections=1
" Highlight extra spacing while editing a groff file.
hi def nroffDefinition
            \ term=italic
            \ cterm=italic
            \ gui=reverse
hi def nroffDefSpecial
            \ term=italic,bold
            \ cterm=italic,bold
            \ gui=reverse,bold

" netrw preferences. Check out netrw-browse-maps in the Vim help file too.
let g:netrw_browsex_viewer="/usr/bin/xdg-open"
let g:netrw_banner=0
let g:netrw_browse_split=4
let g:netrw_altv=1
let g:netrw_liststyle=3
let g:netrw_winsize=30
let g:netrw_list_hide=netrw_gitignore#Hide()

" Linter and fixer options.
let g:ale_fix_on_save=1
let g:ale_linters={
            \ 'python': ['flake8'],
            \ 'lua': ['luac'],
            \ 'html': ['vscodehtml'],
            \ 'css': ['vscodecss']
            \ }
let g:ale_fixers={
            \ '*': ['remove_trailing_lines', 'trim_whitespace'],
            \ 'python': ['yapf'],
            \ 'lua': ['lua-format'],
            \ 'html': ['prettier'],
            \ 'css': ['prettier']
            \ }

set title
set cursorline
set number relativenumber
set showmatch
set backupcopy=auto
set mouse=a     " Activate mouse inputs.
set path+=**	" Fuzzy finder.

" Ignore case when searching for a pattern.
set smartcase
set ignorecase

" Word completion given a dictionary. Enabling spell is required.
set spelllang=es_mx,en_us
set complete+=k

" This produces only soft tab stops.
" Via https://vim.fandom.com/wiki/Indenting_source_code#Indentation_without_hard_tabs
set expandtab
set shiftwidth=4
set softtabstop=4
set autoindent

" Avoid all the hit-enter prompts caused by file messages, and some other
" messages.
" Read the Vim help file for more information.
set shortmess+=acs

" Wrap long lines and preserve their indentation.
" Via https://retracile.net/wiki/VimBreakIndent
set wrap
let &showbreak='+++ '
set breakindent
set linebreak

set wildoptions=pum

" Show Vim in truecolor if it is possible.
if (has("termguicolors"))
    set termguicolors
endif

set background=dark
colorscheme retrobox
